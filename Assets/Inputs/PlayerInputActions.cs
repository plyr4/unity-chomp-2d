//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Robot"",
            ""id"": ""3c169810-e944-4ee7-a89a-92a3ee69e007"",
            ""actions"": [
                {
                    ""name"": ""RightStickXAxis"",
                    ""type"": ""Value"",
                    ""id"": ""abfff0b7-4f51-4675-b674-2fc38fd74973"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStickYAxis"",
                    ""type"": ""Value"",
                    ""id"": ""1e85e792-fc37-413f-ab5b-a0fb0163d39e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftStickXAxis"",
                    ""type"": ""Value"",
                    ""id"": ""ece93f6f-026f-446a-b70a-e7ccd5670499"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftStickYAxis"",
                    ""type"": ""Value"",
                    ""id"": ""af6b9846-4081-4ec6-8460-fdd441105bfc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ButtonAxis"",
                    ""type"": ""Button"",
                    ""id"": ""a4c1fca7-1ace-4786-a36f-b9d48b9ac816"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e8eadbfb-a25d-4bd3-b72e-0bd7d0db45d1"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStickXAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e74d34a1-6d7f-4039-a783-6efe8f3d69d6"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStickYAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef23c3cd-f8c8-4b84-80a1-6dc85d2e1ece"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStickXAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0496427d-c544-41ae-b309-3d68681f6beb"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStickYAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Trigger"",
                    ""id"": ""f91730df-1f61-4f5a-8b82-492b665cb18f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""352c0dfb-94d7-48a4-9c22-a82f830251d9"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Robot
        m_Robot = asset.FindActionMap("Robot", throwIfNotFound: true);
        m_Robot_RightStickXAxis = m_Robot.FindAction("RightStickXAxis", throwIfNotFound: true);
        m_Robot_RightStickYAxis = m_Robot.FindAction("RightStickYAxis", throwIfNotFound: true);
        m_Robot_LeftStickXAxis = m_Robot.FindAction("LeftStickXAxis", throwIfNotFound: true);
        m_Robot_LeftStickYAxis = m_Robot.FindAction("LeftStickYAxis", throwIfNotFound: true);
        m_Robot_ButtonAxis = m_Robot.FindAction("ButtonAxis", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Robot
    private readonly InputActionMap m_Robot;
    private IRobotActions m_RobotActionsCallbackInterface;
    private readonly InputAction m_Robot_RightStickXAxis;
    private readonly InputAction m_Robot_RightStickYAxis;
    private readonly InputAction m_Robot_LeftStickXAxis;
    private readonly InputAction m_Robot_LeftStickYAxis;
    private readonly InputAction m_Robot_ButtonAxis;
    public struct RobotActions
    {
        private @PlayerInputActions m_Wrapper;
        public RobotActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightStickXAxis => m_Wrapper.m_Robot_RightStickXAxis;
        public InputAction @RightStickYAxis => m_Wrapper.m_Robot_RightStickYAxis;
        public InputAction @LeftStickXAxis => m_Wrapper.m_Robot_LeftStickXAxis;
        public InputAction @LeftStickYAxis => m_Wrapper.m_Robot_LeftStickYAxis;
        public InputAction @ButtonAxis => m_Wrapper.m_Robot_ButtonAxis;
        public InputActionMap Get() { return m_Wrapper.m_Robot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RobotActions set) { return set.Get(); }
        public void SetCallbacks(IRobotActions instance)
        {
            if (m_Wrapper.m_RobotActionsCallbackInterface != null)
            {
                @RightStickXAxis.started -= m_Wrapper.m_RobotActionsCallbackInterface.OnRightStickXAxis;
                @RightStickXAxis.performed -= m_Wrapper.m_RobotActionsCallbackInterface.OnRightStickXAxis;
                @RightStickXAxis.canceled -= m_Wrapper.m_RobotActionsCallbackInterface.OnRightStickXAxis;
                @RightStickYAxis.started -= m_Wrapper.m_RobotActionsCallbackInterface.OnRightStickYAxis;
                @RightStickYAxis.performed -= m_Wrapper.m_RobotActionsCallbackInterface.OnRightStickYAxis;
                @RightStickYAxis.canceled -= m_Wrapper.m_RobotActionsCallbackInterface.OnRightStickYAxis;
                @LeftStickXAxis.started -= m_Wrapper.m_RobotActionsCallbackInterface.OnLeftStickXAxis;
                @LeftStickXAxis.performed -= m_Wrapper.m_RobotActionsCallbackInterface.OnLeftStickXAxis;
                @LeftStickXAxis.canceled -= m_Wrapper.m_RobotActionsCallbackInterface.OnLeftStickXAxis;
                @LeftStickYAxis.started -= m_Wrapper.m_RobotActionsCallbackInterface.OnLeftStickYAxis;
                @LeftStickYAxis.performed -= m_Wrapper.m_RobotActionsCallbackInterface.OnLeftStickYAxis;
                @LeftStickYAxis.canceled -= m_Wrapper.m_RobotActionsCallbackInterface.OnLeftStickYAxis;
                @ButtonAxis.started -= m_Wrapper.m_RobotActionsCallbackInterface.OnButtonAxis;
                @ButtonAxis.performed -= m_Wrapper.m_RobotActionsCallbackInterface.OnButtonAxis;
                @ButtonAxis.canceled -= m_Wrapper.m_RobotActionsCallbackInterface.OnButtonAxis;
            }
            m_Wrapper.m_RobotActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RightStickXAxis.started += instance.OnRightStickXAxis;
                @RightStickXAxis.performed += instance.OnRightStickXAxis;
                @RightStickXAxis.canceled += instance.OnRightStickXAxis;
                @RightStickYAxis.started += instance.OnRightStickYAxis;
                @RightStickYAxis.performed += instance.OnRightStickYAxis;
                @RightStickYAxis.canceled += instance.OnRightStickYAxis;
                @LeftStickXAxis.started += instance.OnLeftStickXAxis;
                @LeftStickXAxis.performed += instance.OnLeftStickXAxis;
                @LeftStickXAxis.canceled += instance.OnLeftStickXAxis;
                @LeftStickYAxis.started += instance.OnLeftStickYAxis;
                @LeftStickYAxis.performed += instance.OnLeftStickYAxis;
                @LeftStickYAxis.canceled += instance.OnLeftStickYAxis;
                @ButtonAxis.started += instance.OnButtonAxis;
                @ButtonAxis.performed += instance.OnButtonAxis;
                @ButtonAxis.canceled += instance.OnButtonAxis;
            }
        }
    }
    public RobotActions @Robot => new RobotActions(this);
    public interface IRobotActions
    {
        void OnRightStickXAxis(InputAction.CallbackContext context);
        void OnRightStickYAxis(InputAction.CallbackContext context);
        void OnLeftStickXAxis(InputAction.CallbackContext context);
        void OnLeftStickYAxis(InputAction.CallbackContext context);
        void OnButtonAxis(InputAction.CallbackContext context);
    }
}
